D G "__PCH__" 0 82 ""5.015""
D G "__DEVICE__" 0 82 "6490"
D G "__DATE__" 0 82 ""27-nov-20""
D G "__TIME__" 0 82 ""00:20:32"" "Standard Header file for the PIC18F6490 device ////////////////"
c L "set_tris_a" 1 3 6 "FUNCTION"
v L "value" 1 40 "int8" `54 
f B "set_tris_a" 1 40 "void(int8 value)" `53 
v L "value" 1 41 "int8" `56 
f B "set_tris_b" 1 41 "void(int8 value)" `55 
v L "value" 1 42 "int8" `58 
f B "set_tris_c" 1 42 "void(int8 value)" `57 
v L "value" 1 43 "int8" `60 
f B "set_tris_d" 1 43 "void(int8 value)" `59 
v L "value" 1 44 "int8" `62 
f B "set_tris_e" 1 44 "void(int8 value)" `61 
v L "value" 1 45 "int8" `64 
f B "set_tris_f" 1 45 "void(int8 value)" `63 
v L "value" 1 46 "int8" `66 
f B "set_tris_g" 1 46 "void(int8 value)" `65 
f B "get_tris_a" 1 47 "int8()" `67 
f B "get_tris_b" 1 48 "int8()" `68 
f B "get_tris_c" 1 49 "int8()" `69 
f B "get_tris_d" 1 50 "int8()" `70 
f B "get_tris_e" 1 51 "int8()" `71 
f B "get_tris_f" 1 52 "int8()" `72 
f B "get_tris_g" 1 53 "int8()" `73 
v L "value" 1 54 "int8" `75 
f B "output_a" 1 54 "void(int8 value)" `74 
v L "value" 1 55 "int8" `77 
f B "output_b" 1 55 "void(int8 value)" `76 
v L "value" 1 56 "int8" `79 
f B "output_c" 1 56 "void(int8 value)" `78 
v L "value" 1 57 "int8" `81 
f B "output_d" 1 57 "void(int8 value)" `80 
v L "value" 1 58 "int8" `83 
f B "output_e" 1 58 "void(int8 value)" `82 
v L "value" 1 59 "int8" `85 
f B "output_f" 1 59 "void(int8 value)" `84 
v L "value" 1 60 "int8" `87 
f B "output_g" 1 60 "void(int8 value)" `86 
f B "input_a" 1 61 "int8()" `88 
f B "input_b" 1 62 "int8()" `89 
f B "input_c" 1 63 "int8()" `90 
f B "input_d" 1 64 "int8()" `91 
f B "input_e" 1 65 "int8()" `92 
f B "input_f" 1 66 "int8()" `93 
f B "input_g" 1 67 "int8()" `94 
f B "input_change_a" 1 68 "int8()" `95 
f B "input_change_b" 1 69 "int8()" `96 
f B "input_change_c" 1 70 "int8()" `97 
f B "input_change_d" 1 71 "int8()" `98 
f B "input_change_e" 1 72 "int8()" `99 
f B "input_change_f" 1 73 "int8()" `100 
f B "input_change_g" 1 74 "int8()" `101 
v L "pin" 1 75 "int16" `103 
f B "input" 1 75 "int8(int16 pin)" `102 
v L "pin" 1 76 "int16" `105 
f B "input_state" 1 76 "int8(int16 pin)" `104 
v L "pin" 1 77 "int16" `107 
f B "output_low" 1 77 "void(int16 pin)" `106 
v L "pin" 1 78 "int16" `109 
f B "output_high" 1 78 "void(int16 pin)" `108 
v L "pin" 1 79 "int16" `111 
f B "output_toggle" 1 79 "void(int16 pin)" `110 
v L "pin" 1 80 "int16" `113 
v L "level" 1 80 "int8" `114 
f B "output_bit" 1 80 "void(int16 pin,int8 level)" `112 
v L "pin" 1 81 "int16" `116 
f B "output_float" 1 81 "void(int16 pin)" `115 
v L "pin" 1 82 "int16" `118 
f B "output_drive" 1 82 "void(int16 pin)" `117  "Constants used to identify pins in the above are:"
d G "PIN_A0" 1 86 "31744"
d G "PIN_A1" 1 87 "31745"
d G "PIN_A2" 1 88 "31746"
d G "PIN_A3" 1 89 "31747"
d G "PIN_A4" 1 90 "31748"
d G "PIN_A5" 1 91 "31749"
d G "PIN_A6" 1 92 "31750"
d G "PIN_A7" 1 93 "31751"
d G "PIN_B0" 1 95 "31752"
d G "PIN_B1" 1 96 "31753"
d G "PIN_B2" 1 97 "31754"
d G "PIN_B3" 1 98 "31755"
d G "PIN_B4" 1 99 "31756"
d G "PIN_B5" 1 100 "31757"
d G "PIN_B6" 1 101 "31758"
d G "PIN_B7" 1 102 "31759"
d G "PIN_C0" 1 104 "31760"
d G "PIN_C1" 1 105 "31761"
d G "PIN_C2" 1 106 "31762"
d G "PIN_C3" 1 107 "31763"
d G "PIN_C4" 1 108 "31764"
d G "PIN_C5" 1 109 "31765"
d G "PIN_C6" 1 110 "31766"
d G "PIN_C7" 1 111 "31767"
d G "PIN_D0" 1 113 "31768"
d G "PIN_D1" 1 114 "31769"
d G "PIN_D2" 1 115 "31770"
d G "PIN_D3" 1 116 "31771"
d G "PIN_D4" 1 117 "31772"
d G "PIN_D5" 1 118 "31773"
d G "PIN_D6" 1 119 "31774"
d G "PIN_D7" 1 120 "31775"
d G "PIN_E4" 1 122 "31780"
d G "PIN_E5" 1 123 "31781"
d G "PIN_E6" 1 124 "31782"
d G "PIN_E7" 1 125 "31783"
d G "PIN_F0" 1 127 "31784"
d G "PIN_F1" 1 128 "31785"
d G "PIN_F2" 1 129 "31786"
d G "PIN_F3" 1 130 "31787"
d G "PIN_F4" 1 131 "31788"
d G "PIN_F5" 1 132 "31789"
d G "PIN_F6" 1 133 "31790"
d G "PIN_F7" 1 134 "31791"
d G "PIN_G0" 1 136 "31792"
d G "PIN_G1" 1 137 "31793"
d G "PIN_G2" 1 138 "31794"
d G "PIN_G3" 1 139 "31795"
d G "PIN_G4" 1 140 "31796"
d G "PIN_G5" 1 141 "31797"
d G "FALSE" 1 144 "0"
d G "TRUE" 1 145 "1"
d G "BYTE" 1 147 "int8"
d G "BOOLEAN" 1 148 "int1"
d G "getc" 1 150 "getch"
d G "fgetc" 1 151 "getch"
d G "getchar" 1 152 "getch"
d G "putc" 1 153 "putchar"
d G "fputc" 1 154 "putchar"
d G "fgets" 1 155 "gets"
d G "fputs" 1 156 "puts"
c L "output_drive" 1 3 3 "FUNCTION"
f B "restart_cause" 1 161 "int8()" `119 
f B "reset_cpu" 1 162 "void()" `120 
f B "sleep" 1 163 "void()" `121 
v L "type" 1 164 "int8" `123 
f G "sleep" 1 164 "void(int8 type)" `122  "Constants returned from RESTART_CAUSE() are:"
d G "WDT_TIMEOUT" 1 166 "7"
d G "MCLR_FROM_SLEEP" 1 167 "11"
d G "MCLR_FROM_RUN" 1 168 "15"
d G "NORMAL_POWER_UP" 1 169 "12"
d G "BROWNOUT_RESTART" 1 170 "14"
d G "WDT_FROM_SLEEP" 1 171 "3"
d G "RESET_INSTRUCTION" 1 172 "0"
d G "SLEEP_FULL" 1 175 "0" "Default"
d G "SLEEP_IDLE" 1 176 "1" "Clock and peripherals don't stop"
c L "sleep" 1 3 5 "FUNCTION"
v L "mode" 1 183 "int8" `125 
f B "setup_timer_0" 1 183 "void(int8 mode)" `124 
v L "value" 1 184 "int16" `127 
f B "set_timer0" 1 184 "void(int16 value)" `126 
f B "get_timer0" 1 185 "int16()" `128 
v L "mode" 1 186 "int8" `130 
v L "prescaler" 1 186 "int8" `131 
f B "setup_counters" 1 186 "void(int8 mode,int8 prescaler)" `129 
v L "value" 1 187 "int16" `133 
f B "set_rtcc" 1 187 "void(int16 value)" `132 
f B "get_rtcc" 1 188 "int16()" `134  "Constants used for SETUP_TIMER_0() are:"
d G "T0_INTERNAL" 1 190 "0"
d G "T0_EXT_L_TO_H" 1 191 "32"
d G "T0_EXT_H_TO_L" 1 192 "48"
d G "T0_DIV_1" 1 194 "8"
d G "T0_DIV_2" 1 195 "0"
d G "T0_DIV_4" 1 196 "1"
d G "T0_DIV_8" 1 197 "2"
d G "T0_DIV_16" 1 198 "3"
d G "T0_DIV_32" 1 199 "4"
d G "T0_DIV_64" 1 200 "5"
d G "T0_DIV_128" 1 201 "6"
d G "T0_DIV_256" 1 202 "7"
d G "T0_OFF" 1 204 "0x80"
d G "T0_8_BIT" 1 206 "0x40"
d G "RTCC_INTERNAL" 1 208 "0" "The following are provided for compatibility"
d G "RTCC_EXT_L_TO_H" 1 209 "32" "with older compiler versions"
d G "RTCC_EXT_H_TO_L" 1 210 "48"
d G "RTCC_DIV_1" 1 211 "8"
d G "RTCC_DIV_2" 1 212 "0"
d G "RTCC_DIV_4" 1 213 "1"
d G "RTCC_DIV_8" 1 214 "2"
d G "RTCC_DIV_16" 1 215 "3"
d G "RTCC_DIV_32" 1 216 "4"
d G "RTCC_DIV_64" 1 217 "5"
d G "RTCC_DIV_128" 1 218 "6"
d G "RTCC_DIV_256" 1 219 "7"
d G "RTCC_OFF" 1 220 "0x80"
d G "RTCC_8_BIT" 1 221 "0x40"
c L "get_rtcc" 1 3 8 "FUNCTION"
v L "mode" 1 232 "int16" `136 
f B "setup_wdt" 1 232 "void(int16 mode)" `135 
f B "restart_wdt" 1 233 "void()" `137  "Constants used for SETUP_WDT() are:"
d G "WDT_ON" 1 235 "0x100"
d G "WDT_OFF" 1 236 "0"
d G "WDT_4MS" 1 238 "0x300"
d G "WDT_8MS" 1 239 "0x500"
d G "WDT_16MS" 1 240 "0x700"
d G "WDT_32MS" 1 241 "0x900"
d G "WDT_64MS" 1 242 "0xB00"
d G "WDT_128MS" 1 243 "0xD00"
d G "WDT_256MS" 1 244 "0xF00"
d G "WDT_512MS" 1 245 "0x1100"
d G "WDT_1S" 1 246 "0x1300"
d G "WDT_2S" 1 247 "0x1500"
d G "WDT_4S" 1 248 "0x1700"
d G "WDT_8S" 1 249 "0x1900"
d G "WDT_16" 1 250 "0x1B00"
d G "WDT_32S" 1 251 "0x1D00"
d G "WDT_64S" 1 252 "0x1F00"
d G "WDT_128S" 1 253 "0x2100"
c L "restart_wdt" 1 3 3 "FUNCTION"
v L "mode" 1 259 "int16" `139 
f B "setup_timer_1" 1 259 "void(int16 mode)" `138 
f B "get_timer1" 1 260 "int16()" `140 
v L "value" 1 261 "int16" `142 
f B "set_timer1" 1 261 "void(int16 value)" `141  "Constants used for SETUP_TIMER_1() are:"
d G "T1_DISABLED" 1 264 "0"
d G "T1_INTERNAL" 1 265 "0x85"
d G "T1_EXTERNAL" 1 266 "0x87"
d G "T1_EXTERNAL_SYNC" 1 267 "0x83"
d G "T1_CLK_OUT" 1 269 "8"
d G "T1_DIV_BY_1" 1 271 "0"
d G "T1_DIV_BY_2" 1 272 "0x10"
d G "T1_DIV_BY_4" 1 273 "0x20"
d G "T1_DIV_BY_8" 1 274 "0x30"
c L "set_timer1" 1 3 3 "FUNCTION"
v L "mode" 1 279 "int8" `144 
v L "period" 1 279 "int8" `145 
v L "postscale" 1 279 "int8" `146 
f B "setup_timer_2" 1 279 "void(int8 mode,int8 period,int8 postscale)" `143 
f B "get_timer2" 1 280 "int8()" `147 
v L "value" 1 281 "int8" `149 
f B "set_timer2" 1 281 "void(int8 value)" `148  "Constants used for SETUP_TIMER_2() are:"
d G "T2_DISABLED" 1 283 "0"
d G "T2_DIV_BY_1" 1 284 "4"
d G "T2_DIV_BY_4" 1 285 "5"
d G "T2_DIV_BY_16" 1 286 "6"
c L "set_timer2" 1 3 3 "FUNCTION"
v L "mode" 1 291 "int16" `151 
f B "setup_timer_3" 1 291 "void(int16 mode)" `150 
f B "get_timer3" 1 292 "int16()" `152 
v L "value" 1 293 "int16" `154 
f B "set_timer3" 1 293 "void(int16 value)" `153  "Constants used for SETUP_TIMER_3() are:"
d G "T3_DISABLED" 1 296 "0"
d G "T3_INTERNAL" 1 297 "0x85"
d G "T3_EXTERNAL" 1 298 "0x87"
d G "T3_EXTERNAL_SYNC" 1 299 "0x83"
d G "T3_DIV_BY_1" 1 301 "0"
d G "T3_DIV_BY_2" 1 302 "0x10"
d G "T3_DIV_BY_4" 1 303 "0x20"
d G "T3_DIV_BY_8" 1 304 "0x30"
c L "set_timer3" 1 3 4 "FUNCTION"
v L "mode" 1 310 "int32" `156 
f B "setup_ccp1" 1 310 "void(int32 mode)" `155 
v L "mode" 1 311 "int32" `158 
v L "pwm" 1 311 "int8" `159 
f G "setup_ccp1" 1 311 "void(int32 mode,int8 pwm)" `157 
v L "value" 1 312 "int16" `161 
f B "set_pwm1_duty" 1 312 "void(int16 value)" `160  "Constants used for SETUP_CCPx() are:"
d G "CCP_OFF" 1 314 "0"
d G "CCP_CAPTURE_FE" 1 315 "4"
d G "CCP_CAPTURE_RE" 1 316 "5"
d G "CCP_CAPTURE_DIV_4" 1 317 "6"
d G "CCP_CAPTURE_DIV_16" 1 318 "7"
d G "CCP_COMPARE_SET_ON_MATCH" 1 319 "8"
d G "CCP_COMPARE_CLR_ON_MATCH" 1 320 "9"
d G "CCP_COMPARE_INT" 1 321 "0xA"
d G "CCP_COMPARE_INT_AND_TOGGLE" 1 322 "0x2"
d G "CCP_COMPARE_RESET_TIMER" 1 323 "0xB"
d G "CCP_PWM" 1 324 "0xC"
d G "CCP_PWM_PLUS_1" 1 325 "0x1c"
d G "CCP_PWM_PLUS_2" 1 326 "0x2c"
d G "CCP_PWM_PLUS_3" 1 327 "0x3c"
c L "set_pwm1_duty" 1 3 1 "FUNCTION"
d G "T3_CCP1_TO_2" 1 333 "0x48"
d G "T3_CCP2" 1 334 "0x8"
c L "set_pwm1_duty" 1 3 1 "FUNCTION"
v L "mode" 1 338 "int32" `166 
f B "setup_ccp2" 1 338 "void(int32 mode)" `165 
v L "mode" 1 339 "int32" `168 
v L "pwm" 1 339 "int8" `169 
f G "setup_ccp2" 1 339 "void(int32 mode,int8 pwm)" `167 
v L "value" 1 340 "int16" `171 
f B "set_pwm2_duty" 1 340 "void(int16 value)" `170 
c L "set_pwm2_duty" 1 3 3 "FUNCTION"
v L "mode" 1 347 "int32" `176 
f B "setup_spi" 1 347 "void(int32 mode)" `175 
v L "value" 1 348 "int8" `178 
f B "spi_write" 1 348 "void(int8 value)" `177 
f B "spi_read" 1 349 "int8()" `179 
v L "value" 1 350 "int8" `181 
f G "spi_read" 1 350 "int8(int8 value)" `180 
f B "spi_data_in" 1 351 "int8()" `182 
v L "mode" 1 352 "int32" `184 
f B "setup_spi2" 1 352 "void(int32 mode)" `183 
v L "value" 1 353 "int8" `186 
f B "spi_write2" 1 353 "void(int8 value)" `185 
f B "spi_read2" 1 354 "int8()" `187 
v L "value" 1 355 "int8" `189 
f G "spi_read2" 1 355 "int8(int8 value)" `188 
f B "spi_data_in2" 1 356 "int8()" `190  "Constants used in SETUP_SPI() are:"
d G "SPI_DISABLED" 1 358 "0x00"
d G "SPI_MASTER" 1 359 "0x20"
d G "SPI_SLAVE" 1 360 "0x24"
d G "SPI_SCK_IDLE_HIGH" 1 361 "0x10"
d G "SPI_SCK_IDLE_LOW" 1 362 "0x00"
d G "SPI_CLK_DIV_4" 1 363 "0x00"
d G "SPI_CLK_DIV_16" 1 364 "0x01"
d G "SPI_CLK_DIV_64" 1 365 "0x02"
d G "SPI_CLK_T2" 1 366 "0x03"
d G "SPI_SS_DISABLED" 1 367 "0x01"
d G "SPI_XMIT_L_TO_H" 1 369 "0x4000"
d G "SPI_XMIT_H_TO_L" 1 370 "0x0000"
d G "SPI_SAMPLE_AT_MIDDLE" 1 372 "0x0000"
d G "SPI_SAMPLE_AT_END" 1 373 "0x8000"
d G "SPI_L_TO_H" 1 376 "SPI_SCK_IDLE_LOW"
d G "SPI_H_TO_L" 1 377 "SPI_SCK_IDLE_HIGH"
c L "spi_data_in2" 1 3 2 "FUNCTION"
v L "baud" 1 381 "int32" `192 
f B "setup_uart" 1 381 "void(int32 baud)" `191 
v L "baud" 1 382 "int32" `194 
v L "stream" 1 382 "int8" `195 
f G "setup_uart" 1 382 "void(int32 baud,int8 stream)" `193 
v L "baud" 1 383 "int32" `197 
v L "stream" 1 383 "int8" `198 
v L "clock" 1 383 "int32" `199 
f G "setup_uart" 1 383 "void(int32 baud,int8 stream,int32 clock)" `196 
v L "baud" 1 384 "int32" `201 
f B "set_uart_speed" 1 384 "void(int32 baud)" `200 
v L "baud" 1 385 "int32" `203 
v L "stream" 1 385 "int8" `204 
f G "set_uart_speed" 1 385 "void(int32 baud,int8 stream)" `202 
v L "baud" 1 386 "int32" `206 
v L "stream" 1 386 "int8" `207 
v L "clock" 1 386 "int32" `208 
f G "set_uart_speed" 1 386 "void(int32 baud,int8 stream,int32 clock)" `205  "Constants used in setup_uart() are:"
d G "UART_ADDRESS" 1 390 "2"
d G "UART_DATA" 1 391 "4"
d G "UART_AUTODETECT" 1 392 "8"
d G "UART_AUTODETECT_NOWAIT" 1 393 "9"
d G "UART_WAKEUP_ON_RDA" 1 394 "10"
d G "UART_SEND_BREAK" 1 395 "13"
c L "set_uart_speed" 1 3 3 "FUNCTION"
v L "mode" 1 399 "int32" `210 
f B "setup_comparator" 1 399 "void(int32 mode)" `209  "Constants used in setup_comparator() are:"
d G "F6_F5_F4_F5" 1 401 "0x70ff04"
d G "F6_F5_F4_F3_OUT_ON_F2_F1" 1 402 "0x78F903"
d G "F6_F5_F4_F5_OUT_ON_F2_F1" 1 403 "0x70F905"
d G "NC_NC_NC_NC" 1 404 "0x00ff07"
d G "F6_F5_F4_F3" 1 405 "0x78ff02"
d G "F6_F5_NC_NC_OUT_ON_F2" 1 406 "0x60FB01"
d G "F6_VR_F4_VR" 1 407 "0x50ff06"
d G "F5_VR_F3_VR" 1 408 "0x28ff0e"
c L "setup_comparator" 1 3 2 "FUNCTION"
v L "mode" 1 415 "int8" `214 
f B "setup_vref" 1 415 "void(int8 mode)" `213  "Constants used in setup_vref() are:"
d G "VREF_LOW" 1 417 "0xa0"
d G "VREF_HIGH" 1 418 "0x80"
d G "VREF_F5" 1 420 "0x40"
d G "VREF_COMP" 1 421 "0x10"
c L "setup_vref" 1 3 2 "FUNCTION"
v L "mode" 1 425 "int8" `216 
f B "setup_low_volt_detect" 1 425 "void(int8 mode)" `215  "Constants used in setup_low_volt_detect() are:"
d G "LVD_LVDIN" 1 427 "0x1F"
d G "LVD_45" 1 428 "0x1E"
d G "LVD_42" 1 429 "0x1D"
d G "LVD_40" 1 430 "0x1C"
d G "LVD_38" 1 431 "0x1B"
d G "LVD_36" 1 432 "0x1A"
d G "LVD_35" 1 433 "0x19"
d G "LVD_33" 1 434 "0x18"
d G "LVD_30" 1 435 "0x17"
d G "LVD_28" 1 436 "0x16"
d G "LVD_27" 1 437 "0x15"
d G "LVD_25" 1 438 "0x14"
d G "LVD_24" 1 439 "0x13"
d G "LVD_23" 1 440 "0x12"
d G "LVD_22" 1 441 "0x11"
d G "LVD_21" 1 442 "0x10"
d G "LVD_TRIGGER_BELOW" 1 444 "0"
d G "LVD_TRIGGER_ABOVE" 1 445 "0x80"
c L "setup_low_volt_detect" 1 3 3 "FUNCTION"
v L "mode" 1 450 "int16" `218 
v L "prescale" 1 450 "int8" `219 
v L "segments0_31" 1 450 "int32" `220 
v L "segments32_47" 1 450 "int16" `221 
f B "setup_lcd" 1 450 "void(int16 mode,int8 prescale,int32 segments0_31,int16 segments32_47)" `217 
v L "buffer_pointer" 1 451 "*int8" `223 
v L "offset" 1 451 "int8" `224 
v L "length" 1 451 "int8" `225 
f B "lcd_load" 1 451 "void(*int8 buffer_pointer,int8 offset,int8 length)" `222 
v L "symbol" 1 452 "int16" `227 
v L "b1_addr" 1 452 "int8" `228 
f B "lcd_symbol" 1 452 "void(int16 symbol,int8 b1_addr,*int8 _VA_LIST)" `226  "Constants used in setup_lcd() are:"
d G "LCD_DISABLED" 1 454 "0"
d G "LCD_STATIC" 1 455 "0x80"
d G "LCD_MUX12" 1 456 "0x81"
d G "LCD_MUX13" 1 457 "0x82"
d G "LCD_MUX14" 1 458 "0x83"
d G "LCD_STOP_ON_SLEEP" 1 459 "0x40"
d G "LCD_USE_TIMER_1" 1 460 "0x04"
d G "LCD_INTRC" 1 461 "0x08"
d G "LCD_BIAS_PINS" 1 462 "0x10"
d G "LCD_HALF_BIAS" 1 463 "0x4000"
d G "LCD_TYPE_B_WAVE" 1 464 "0x8000"
d G "COM0" 1 467 "0"
d G "COM1" 1 468 "48"
d G "COM2" 1 469 "96"
d G "COM3" 1 470 "144"
c L "lcd_symbol" 1 3 2 "FUNCTION"
v L "mode" 1 475 "int8" `231 
f B "setup_oscillator" 1 475 "int8(int8 mode)" `230 
v L "mode" 1 476 "int8" `233 
v L "tune" 1 476 "sint8" `234 
f G "setup_oscillator" 1 476 "int8(int8 mode,sint8 tune)" `232  "Constants used in setup_oscillator() are:"
d G "OSC_31KHZ" 1 479 "0"
d G "OSC_125KHZ" 1 480 "0x10"
d G "OSC_250KHZ" 1 481 "0x20"
d G "OSC_500KHZ" 1 482 "0x30"
d G "OSC_1MHZ" 1 483 "0x40"
d G "OSC_2MHZ" 1 484 "0x50"
d G "OSC_4MHZ" 1 485 "0x60"
d G "OSC_8MHZ" 1 486 "0x70"
d G "OSC_16MHZ" 1 487 "0x4060"
d G "OSC_32MHZ" 1 488 "0x4070"
d G "OSC_TIMER1" 1 490 "1"
d G "OSC_INTRC" 1 491 "2"
d G "OSC_NORMAL" 1 492 "0"
d G "OSC_IDLE_MODE" 1 494 "0x80"
d G "OSC_31250" 1 495 "0x8000"
d G "OSC_PLL_ON" 1 496 "0x4000"
d G "OSC_PLL_OFF" 1 497 "0"
d G "OSC_STATE_STABLE" 1 501 "4"
d G "OSC_STATE_EXT_RUNNING" 1 502 "8"
c L "setup_oscillator" 1 3 4 "FUNCTION"
v L "mode" 1 509 "int16" `236 
f B "setup_adc" 1 509 "void(int16 mode)" `235 
f B "read_adc" 1 510 "int8()" `237 
v L "mode" 1 511 "int8" `239 
f G "read_adc" 1 511 "int8(int8 mode)" `238 
f G "read_adc" 1 512 "int16()" `240 
v L "mode" 1 513 "int8" `242 
f G "read_adc" 1 513 "int16(int8 mode)" `241 
f B "adc_done" 1 514 "int8()" `243  "Constants used for SETUP_ADC() are:"
d G "ADC_OFF" 1 516 "0" "ADC Off"
d G "ADC_CLOCK_DIV_2" 1 517 "0x100"
d G "ADC_CLOCK_DIV_4" 1 518 "0x04"
d G "ADC_CLOCK_DIV_8" 1 519 "0x01"
d G "ADC_CLOCK_DIV_16" 1 520 "0x05"
d G "ADC_CLOCK_DIV_32" 1 521 "0x02"
d G "ADC_CLOCK_DIV_64" 1 522 "0x06"
d G "ADC_CLOCK_INTERNAL" 1 523 "0x07" "Internal 2-6us"
d G "ADC_TAD_MUL_0" 1 525 "0x00"
d G "ADC_TAD_MUL_2" 1 526 "0x08"
d G "ADC_TAD_MUL_4" 1 527 "0x10"
d G "ADC_TAD_MUL_6" 1 528 "0x18"
d G "ADC_TAD_MUL_8" 1 529 "0x20"
d G "ADC_TAD_MUL_12" 1 530 "0x28"
d G "ADC_TAD_MUL_16" 1 531 "0x30"
d G "ADC_TAD_MUL_20" 1 532 "0x38"
c L "adc_done" 1 3 1 "FUNCTION"
v L "pins" 1 535 "int8" `245 
f B "setup_adc_ports" 1 535 "void(int8 pins)" `244 
v L "pins" 1 536 "int8" `247 
v L "reference" 1 536 "int8" `248 
f G "setup_adc_ports" 1 536 "void(int8 pins,int8 reference)" `246 
v L "channel" 1 537 "int8" `250 
f B "set_adc_channel" 1 537 "void(int8 channel)" `249  "Constants used in SETUP_ADC_PORTS() are:"
d G "NO_ANALOGS" 1 540 "0x0F" "None"
d G "ALL_ANALOG" 1 541 "0x00" "A0 A1 A2 A3 A5 F0 F1 F2 F3 F4 F5 F6"
d G "AN0_TO_AN10" 1 542 "0x04" "A0 A1 A2 A3 A5 F0 F1 F2 F3 F4 F5"
d G "AN0_TO_AN9" 1 543 "0x05" "A0 A1 A2 A3 A5 F0 F1 F2 F3 F4"
d G "AN0_TO_AN8" 1 544 "0x06" "A0 A1 A2 A3 A5 F0 F1 F2 F3"
d G "AN0_TO_AN7" 1 545 "0x07" "A0 A1 A2 A3 A5 F0 F1 F2"
d G "AN0_TO_AN6" 1 546 "0x08" "A0 A1 A2 A3 A5 F0 F1"
d G "AN0_TO_AN5" 1 547 "0x09" "A0 A1 A2 A3 A5 F0"
d G "AN0_TO_AN4" 1 548 "0x0A" "A0 A1 A2 A3 A5"
d G "AN0_TO_AN3" 1 549 "0x0B" "A0 A1 A2 A3"
d G "AN0_TO_AN2" 1 550 "0x0C" "A0 A1 A2"
d G "AN0_TO_AN1" 1 551 "0x0D" "A0 A1"
d G "AN0" 1 552 "0x0E" "A0"
d G "ANALOG_AN0_TO_AN10" 1 553 "0x04" "!old only provided for compatibility"
d G "ANALOG_AN0_TO_AN9" 1 554 "0x05" "!old only provided for compatibility"
d G "ANALOG_AN0_TO_AN8" 1 555 "0x06" "!old only provided for compatibility"
d G "ANALOG_AN0_TO_AN7" 1 556 "0x07" "!old only provided for compatibility"
d G "ANALOG_AN0_TO_AN6" 1 557 "0x08" "!old only provided for compatibility"
d G "ANALOG_AN0_TO_AN5" 1 558 "0x09" "!old only provided for compatibility"
d G "ANALOG_AN0_TO_AN4" 1 559 "0x0A" "!old only provided for compatibility"
d G "ANALOG_AN0_TO_AN3" 1 560 "0x0B" "!old only provided for compatibility"
d G "ANALOG_AN0_TO_AN2" 1 561 "0x0C" "!old only provided for compatibility"
d G "ANALOG_AN0_TO_AN1" 1 562 "0x0D" "!old only provided for compatibility"
d G "ANALOG_AN0" 1 563 "0x0E" "!old only provided for compatibility"
d G "VSS_VDD" 1 566 "0x00" "Range 0-Vdd"
d G "VREF_VREF" 1 567 "0x30" "Range VrefL-VrefH"
d G "VREF_VDD" 1 568 "0x20" "Range VrefL-Vdd"
d G "VSS_VREF" 1 569 "0x10" "Range 0-VrefH"
d G "ADC_START_AND_READ" 1 572 "7" "This is the default if nothing is specified"
d G "ADC_START_ONLY" 1 573 "1"
d G "ADC_READ_ONLY" 1 574 "6"
c L "set_adc_channel" 1 3 3 "FUNCTION"
v L "x" 1 580 "sint8" `252 
f B "abs" 1 580 "sint8(sint8 x)" `251 
v L "x" 1 581 "sint16" `254 
f G "abs" 1 581 "sint16(sint16 x)" `253 
v L "x" 1 582 "sint32" `256 
f G "abs" 1 582 "sint32(sint32 x)" `255 
v L "x" 1 583 "float" `258 
f G "abs" 1 583 "float(float x)" `257 
v L "??65535" 1 584 "int8" `260 
v L "??65535" 1 584 "int8" `261 
f B "_mul" 1 584 "int16(int8 ,int8 )" `259 
v L "??65535" 1 585 "sint8" `260 
v L "??65535" 1 585 "sint8" `264 
f G "_mul" 1 585 "sint16(sint8 ,sint8 )" `262 
v L "??65535" 1 586 "int16" `260 
v L "??65535" 1 586 "int16" `267 
f G "_mul" 1 586 "int32(int16 ,int16 )" `265 
v L "??65535" 1 587 "sint16" `260 
v L "??65535" 1 587 "sint16" `270 
f G "_mul" 1 587 "sint32(sint16 ,sint16 )" `268  "Memory Manipulation Prototypes:"
v L "bank" 1 590 "int8" `272 
v L "offset" 1 590 "int8" `273 
f B "read_bank" 1 590 "int8(int8 bank,int8 offset)" `271 
v L "bank" 1 591 "int8" `275 
v L "offset" 1 591 "int8" `276 
v L "value" 1 591 "int8" `277 
f B "write_bank" 1 591 "void(int8 bank,int8 offset,int8 value)" `274 
v L "dest" 1 592 "*int8" `279 
v L "src" 1 592 "*int8" `280 
f B "strcpy" 1 592 "void(*int8 dest,*int8 src)" `278 
v L "dest" 1 593 "*int8" `282 
v L "src" 1 593 "*int8" `283 
f B "strcopy" 1 593 "void(*int8 dest,*int8 src)" `281 
v L "destination" 1 594 "*int8" `285 
v L "value" 1 594 "int8" `286 
v L "num" 1 594 "int16" `287 
f B "memset" 1 594 "void(*int8 destination,int8 value,int16 num)" `284 
v L "destination" 1 595 "*int8" `289 
v L "source" 1 595 "*int8" `290 
v L "num" 1 595 "int16" `291 
f B "memcpy" 1 595 "void(*int8 destination,*int8 source,int16 num)" `288  "String Prototypes:"
v L "cvalue" 1 598 "int8" `293 
f B "toupper" 1 598 "int8(int8 cvalue)" `292 
v L "cvalue" 1 599 "int8" `295 
f B "tolower" 1 599 "int8(int8 cvalue)" `294 
v L "string" 1 600 "*int8" `297 
v L "cstring" 1 600 "*int8" `298 
f B "sprintf" 1 600 "void(*int8 string,*int8 cstring,*int8 _VA_LIST)" `296  "Data Manipulators Prototypes:"
v L "address" 1 603 "*int8" `301 
v L "bytes" 1 603 "int8" `302 
v L "value" 1 603 "int8" `303 
f B "shift_left" 1 603 "int8(*int8 address,int8 bytes,int8 value)" `300 
v L "address" 1 604 "*int8" `305 
v L "bytes" 1 604 "int8" `306 
v L "value" 1 604 "int8" `307 
f B "shift_right" 1 604 "int8(*int8 address,int8 bytes,int8 value)" `304 
v L "address" 1 605 "*int8" `309 
v L "bytes" 1 605 "int8" `310 
f B "rotate_left" 1 605 "void(*int8 address,int8 bytes)" `308 
v L "address" 1 606 "*int8" `312 
v L "bytes" 1 606 "int8" `313 
f B "rotate_right" 1 606 "void(*int8 address,int8 bytes)" `311 
v L "value" 1 607 "int8" `315 
f B "swap" 1 607 "void(int8 value)" `314 
v L "var" 1 608 "int16" `317 
v L "offset" 1 608 "int8" `318 
f B "make8" 1 608 "int8(int16 var,int8 offset)" `316 
v L "var" 1 609 "int32" `317 
v L "offset" 1 609 "int8" `321 
f G "make8" 1 609 "int8(int32 var,int8 offset)" `319 
v L "varhigh" 1 610 "int8" `323 
v L "varlow" 1 610 "int8" `324 
f B "make16" 1 610 "int16(int8 varhigh,int8 varlow)" `322 
v L "var1" 1 611 "int16" `326 
f B "make32" 1 611 "int32(int16 var1)" `325 
v L "var1" 1 612 "int16" `328 
v L "var2" 1 612 "int16" `329 
f G "make32" 1 612 "int32(int16 var1,int16 var2)" `327 
v L "var1" 1 613 "int16" `328 
v L "var2" 1 613 "int8" `332 
f G "make32" 1 613 "int32(int16 var1,int8 var2)" `330 
v L "var1" 1 614 "int16" `334 
v L "var2" 1 614 "int8" `335 
v L "var3" 1 614 "int8" `336 
f G "make32" 1 614 "int32(int16 var1,int8 var2,int8 var3)" `333 
v L "var1" 1 615 "int8" `338 
f G "make32" 1 615 "int32(int8 var1)" `337 
v L "var1" 1 616 "int8" `328 
v L "var2" 1 616 "int8" `341 
f G "make32" 1 616 "int32(int8 var1,int8 var2)" `339 
v L "var1" 1 617 "int8" `334 
v L "var2" 1 617 "int8" `335 
v L "var3" 1 617 "int8" `345 
f G "make32" 1 617 "int32(int8 var1,int8 var2,int8 var3)" `342 
v L "var1" 1 618 "int8" `347 
v L "var2" 1 618 "int8" `348 
v L "var3" 1 618 "int8" `349 
v L "var4" 1 618 "int8" `350 
f G "make32" 1 618 "int32(int8 var1,int8 var2,int8 var3,int8 var4)" `346 
v L "var1" 1 619 "int8" `328 
v L "var2" 1 619 "int16" `353 
f G "make32" 1 619 "int32(int8 var1,int16 var2)" `351 
v L "var1" 1 620 "int8" `334 
v L "var2" 1 620 "int16" `335 
v L "var3" 1 620 "int8" `357 
f G "make32" 1 620 "int32(int8 var1,int16 var2,int8 var3)" `354 
v L "var1" 1 621 "int8" `334 
v L "var2" 1 621 "int8" `335 
v L "var3" 1 621 "int16" `361 
f G "make32" 1 621 "int32(int8 var1,int8 var2,int16 var3)" `358 
v L "var" 1 622 "int8" `363 
v L "bit" 1 622 "int8" `364 
f B "bit_set" 1 622 "void(int8 var,int8 bit)" `362 
v L "var" 1 623 "int16" `363 
v L "bit" 1 623 "int8" `367 
f G "bit_set" 1 623 "void(int16 var,int8 bit)" `365 
v L "var" 1 624 "int32" `363 
v L "bit" 1 624 "int8" `370 
f G "bit_set" 1 624 "void(int32 var,int8 bit)" `368 
v L "var" 1 625 "int8" `372 
v L "bit" 1 625 "int8" `373 
f B "bit_clear" 1 625 "void(int8 var,int8 bit)" `371 
v L "var" 1 626 "int16" `372 
v L "bit" 1 626 "int8" `376 
f G "bit_clear" 1 626 "void(int16 var,int8 bit)" `374 
v L "var" 1 627 "int32" `372 
v L "bit" 1 627 "int8" `379 
f G "bit_clear" 1 627 "void(int32 var,int8 bit)" `377 
v L "var" 1 628 "int8" `381 
v L "bit" 1 628 "int8" `382 
f B "bit_test" 1 628 "int8(int8 var,int8 bit)" `380 
v L "var" 1 629 "int16" `381 
v L "bit" 1 629 "int8" `385 
f G "bit_test" 1 629 "int8(int16 var,int8 bit)" `383 
v L "var" 1 630 "int32" `381 
v L "bit" 1 630 "int8" `388 
f G "bit_test" 1 630 "int8(int32 var,int8 bit)" `386  "#use delay() Prototypes:"
v L "count" 1 633 "int8" `390 
f B "delay_cycles" 1 633 "void(int8 count)" `389 
v L "time" 1 634 "int16" `392 
f B "delay_ms" 1 634 "void(int16 time)" `391 
v L "time" 1 635 "int16" `394 
f B "delay_us" 1 635 "void(int16 time)" `393  "#use rs232() Prototypes:"
v L "cdata" 1 638 "int8" `396 
f B "putchar" 1 638 "void(int8 cdata)" `395 
v L "cdata" 1 639 "int8" `398 
v L "stream" 1 639 "int8" `399 
f G "putchar" 1 639 "void(int8 cdata,int8 stream)" `397 
v L "string" 1 640 "*int8" `401 
f B "puts" 1 640 "void(*int8 string)" `400 
v L "string" 1 641 "*int8" `403 
v L "stream" 1 641 "int8" `404 
f G "puts" 1 641 "void(*int8 string,int8 stream)" `402 
f B "getch" 1 642 "int8()" `405 
v L "stream" 1 643 "int8" `407 
f G "getch" 1 643 "int8(int8 stream)" `406 
v L "string" 1 644 "*int8" `409 
f B "gets" 1 644 "void(*int8 string)" `408 
v L "string" 1 645 "*int8" `411 
v L "stream" 1 645 "int8" `412 
f G "gets" 1 645 "void(*int8 string,int8 stream)" `410 
f B "kbhit" 1 646 "int8()" `413 
v L "stream" 1 647 "int8" `415 
f G "kbhit" 1 647 "int8(int8 stream)" `414 
v L "string" 1 648 "*int8" `417 
f B "printf" 1 648 "void(*int8 string,*int8 _VA_LIST)" `416 
v L "stream" 1 649 "int8" `420 
v L "string" 1 649 "*int8" `421 
f B "fprintf" 1 649 "void(int8 stream,*int8 string,*int8 _VA_LIST)" `419 
f B "putc_send" 1 650 "void()" `423 
v L "stream" 1 651 "int8" `425 
f B "fputc_send" 1 651 "void(int8 stream)" `424 
f B "rcv_buffer_full" 1 652 "int8()" `426 
v L "stream" 1 653 "int8" `428 
f G "rcv_buffer_full" 1 653 "int8(int8 stream)" `427 
f B "rcv_buffer_bytes" 1 654 "int16()" `429 
v L "stream" 1 655 "int8" `431 
f G "rcv_buffer_bytes" 1 655 "int16(int8 stream)" `430 
f B "tx_buffer_full" 1 656 "int8()" `432 
v L "stream" 1 657 "int8" `434 
f G "tx_buffer_full" 1 657 "int8(int8 stream)" `433 
f B "tx_buffer_bytes" 1 658 "int16()" `435 
v L "stream" 1 659 "int8" `437 
f G "tx_buffer_bytes" 1 659 "int16(int8 stream)" `436  "#use i2c() Prototypes:"
f B "i2c_read" 1 662 "int8()" `438 
v L "stream" 1 663 "int8" `440 
f G "i2c_read" 1 663 "int8(int8 stream)" `439 
v L "stream" 1 664 "int8" `442 
v L "ack" 1 664 "int8" `443 
f G "i2c_read" 1 664 "int8(int8 stream,int8 ack)" `441 
v L "data" 1 665 "int8" `445 
f B "i2c_write" 1 665 "int8(int8 data)" `444 
v L "stream" 1 666 "int8" `447 
v L "data" 1 666 "int8" `448 
f G "i2c_write" 1 666 "int8(int8 stream,int8 data)" `446 
f B "i2c_start" 1 667 "void()" `449 
v L "stream" 1 668 "int8" `451 
f G "i2c_start" 1 668 "void(int8 stream)" `450 
v L "stream" 1 669 "int8" `453 
v L "restart" 1 669 "int8" `454 
f G "i2c_start" 1 669 "void(int8 stream,int8 restart)" `452 
f B "i2c_stop" 1 670 "void()" `455 
v L "stream" 1 671 "int8" `457 
f G "i2c_stop" 1 671 "void(int8 stream)" `456 
f B "i2c_isr_state" 1 672 "int8()" `458 
v L "addr" 1 673 "int8" `460 
f B "i2c_slaveaddr" 1 673 "void(int8 addr)" `459 
v L "stream" 1 674 "int8" `462 
v L "addr" 1 674 "int8" `463 
f G "i2c_slaveaddr" 1 674 "void(int8 stream,int8 addr)" `461 
f B "i2c_poll" 1 675 "int8()" `464 
v L "stream" 1 676 "int8" `466 
f G "i2c_poll" 1 676 "int8(int8 stream)" `465 
v L "baud" 1 677 "int32" `468 
f B "i2c_init" 1 677 "void(int32 baud)" `467 
v L "stream" 1 678 "int8" `470 
v L "baud" 1 678 "int32" `471 
f G "i2c_init" 1 678 "void(int8 stream,int32 baud)" `469  "#use spi() Prototypes:"
f B "spi_xfer" 1 681 "int8()" `472 
f G "spi_xfer" 1 682 "int16()" `473 
f G "spi_xfer" 1 683 "int32()" `474 
v L "data" 1 684 "int8" `476 
f G "spi_xfer" 1 684 "int8(int8 data)" `475 
v L "data" 1 685 "int16" `478 
f G "spi_xfer" 1 685 "int16(int16 data)" `477 
v L "data" 1 686 "int32" `480 
f G "spi_xfer" 1 686 "int32(int32 data)" `479 
v L "stream" 1 687 "int8" `482 
v L "data" 1 687 "int8" `483 
f G "spi_xfer" 1 687 "int8(int8 stream,int8 data)" `481 
v L "stream" 1 688 "int8" `482 
v L "data" 1 688 "int16" `486 
f G "spi_xfer" 1 688 "int16(int8 stream,int16 data)" `484 
v L "stream" 1 689 "int8" `482 
v L "data" 1 689 "int32" `489 
f G "spi_xfer" 1 689 "int32(int8 stream,int32 data)" `487 
v L "stream" 1 690 "int8" `491 
v L "data" 1 690 "int8" `492 
v L "bits" 1 690 "int8" `493 
f G "spi_xfer" 1 690 "int8(int8 stream,int8 data,int8 bits)" `490 
v L "stream" 1 691 "int8" `491 
v L "data" 1 691 "int16" `492 
v L "bits" 1 691 "int8" `497 
f G "spi_xfer" 1 691 "int16(int8 stream,int16 data,int8 bits)" `494 
v L "stream" 1 692 "int8" `491 
v L "data" 1 692 "int32" `492 
v L "bits" 1 692 "int8" `501 
f G "spi_xfer" 1 692 "int32(int8 stream,int32 data,int8 bits)" `498 
v L "baud" 1 693 "int32" `503 
f B "spi_init" 1 693 "void(int32 baud)" `502 
v L "stream" 1 694 "int8" `505 
v L "baud" 1 694 "int32" `506 
f G "spi_init" 1 694 "void(int8 stream,int32 baud)" `504 
v L "baud" 1 695 "int32" `508 
f B "spi_speed" 1 695 "void(int32 baud)" `507 
v L "stream" 1 696 "int8" `510 
v L "baud" 1 696 "int32" `511 
f G "spi_speed" 1 696 "void(int8 stream,int32 baud)" `509 
v L "stream" 1 697 "int8" `513 
v L "baud" 1 697 "int32" `514 
v L "clock" 1 697 "int32" `515 
f G "spi_speed" 1 697 "void(int8 stream,int32 baud,int32 clock)" `512 
v L "data" 1 698 "int8" `517 
f B "spi_prewrite" 1 698 "void(int8 data)" `516 
v L "data" 1 699 "int16" `519 
f G "spi_prewrite" 1 699 "void(int16 data)" `518 
v L "data" 1 700 "int32" `521 
f G "spi_prewrite" 1 700 "void(int32 data)" `520 
v L "??65535" 1 701 "int8" `523 
v L "data" 1 701 "int8" `524 
f G "spi_prewrite" 1 701 "void(int8 ,int8 data)" `522 
v L "??65535" 1 702 "int8" `523 
v L "data" 1 702 "int16" `527 
f G "spi_prewrite" 1 702 "void(int8 ,int16 data)" `525 
v L "??65535" 1 703 "int8" `523 
v L "data" 1 703 "int32" `530 
f G "spi_prewrite" 1 703 "void(int8 ,int32 data)" `528 
f B "spi_xfer_in" 1 704 "int8()" `531 
f G "spi_xfer_in" 1 705 "int16()" `532 
f G "spi_xfer_in" 1 706 "int32()" `533 
v L "bits" 1 707 "int8" `535 
f G "spi_xfer_in" 1 707 "int8(int8 bits)" `534 
v L "bits" 1 708 "int8" `537 
f G "spi_xfer_in" 1 708 "int16(int8 bits)" `536 
v L "bits" 1 709 "int8" `539 
f G "spi_xfer_in" 1 709 "int32(int8 bits)" `538 
v L "stream" 1 710 "int8" `541 
v L "bits" 1 710 "int8" `542 
f G "spi_xfer_in" 1 710 "int8(int8 stream,int8 bits)" `540 
v L "stream" 1 711 "int8" `541 
v L "bits" 1 711 "int8" `545 
f G "spi_xfer_in" 1 711 "int16(int8 stream,int8 bits)" `543 
v L "stream" 1 712 "int8" `541 
v L "bits" 1 712 "int8" `548 
f G "spi_xfer_in" 1 712 "int32(int8 stream,int8 bits)" `546  "#use rtos() Prototypes:"
f B "rtos_run" 1 715 "void()" `549 
f B "rtos_yield" 1 716 "void()" `550 
v L "task" 1 717 "int8" `552 
f B "rtos_enable" 1 717 "void(int8 task)" `551 
v L "task" 1 718 "int8" `554 
f B "rtos_disable" 1 718 "void(int8 task)" `553 
f B "rtos_terminate" 1 719 "void()" `555 
v L "flag" 1 720 "int8" `557 
f B "rtos_await" 1 720 "void(int8 flag)" `556 
v L "sem" 1 721 "int8" `559 
f B "rtos_wait" 1 721 "void(int8 sem)" `558 
v L "sem" 1 722 "int8" `561 
f B "rtos_signal" 1 722 "void(int8 sem)" `560 
v L "task" 1 723 "int8" `563 
v L "msg" 1 723 "int8" `564 
f B "rtos_msg_send" 1 723 "void(int8 task,int8 msg)" `562 
f B "rtos_msg_read" 1 724 "int8()" `565 
f B "rtos_msg_poll" 1 725 "int8()" `566 
v L "task" 1 726 "int8" `568 
f B "rtos_overrun" 1 726 "int8(int8 task)" `567 
v L "task" 1 727 "int8" `570 
v L "stat" 1 727 "*int8" `571 
f B "rtos_stats" 1 727 "void(int8 task,*int8 stat)" `569  "#use timer() Prototypes:"
f B "get_ticks" 1 730 "int8()" `572 
f G "get_ticks" 1 731 "int16()" `573 
f G "get_ticks" 1 732 "int32()" `574 
v L "stream" 1 733 "int8" `576 
f G "get_ticks" 1 733 "int8(int8 stream)" `575 
v L "stream" 1 734 "int8" `578 
f G "get_ticks" 1 734 "int16(int8 stream)" `577 
v L "stream" 1 735 "int8" `580 
f G "get_ticks" 1 735 "int32(int8 stream)" `579 
v L "value" 1 736 "int8" `582 
f B "set_ticks" 1 736 "void(int8 value)" `581 
v L "value" 1 737 "int16" `584 
f G "set_ticks" 1 737 "void(int16 value)" `583 
v L "value" 1 738 "int32" `586 
f G "set_ticks" 1 738 "void(int32 value)" `585 
v L "stream" 1 739 "int8" `588 
v L "value" 1 739 "int8" `589 
f G "set_ticks" 1 739 "void(int8 stream,int8 value)" `587 
v L "stream" 1 740 "int8" `588 
v L "value" 1 740 "int16" `592 
f G "set_ticks" 1 740 "void(int8 stream,int16 value)" `590 
v L "stream" 1 741 "int8" `588 
v L "value" 1 741 "int32" `595 
f G "set_ticks" 1 741 "void(int8 stream,int32 value)" `593  "#use pwm() Prototypes:"
f B "pwm_on" 1 744 "void()" `596 
v L "stream" 1 745 "int8" `598 
f G "pwm_on" 1 745 "void(int8 stream)" `597 
f B "pwm_off" 1 746 "void()" `599 
v L "stream" 1 747 "int8" `601 
f G "pwm_off" 1 747 "void(int8 stream)" `600 
v L "duty" 1 748 "int16" `603 
f B "pwm_set_duty" 1 748 "void(int16 duty)" `602 
v L "stream" 1 749 "int8" `605 
v L "duty" 1 749 "int16" `606 
f G "pwm_set_duty" 1 749 "void(int8 stream,int16 duty)" `604 
v L "percent" 1 750 "int16" `608 
f B "pwm_set_duty_percent" 1 750 "void(int16 percent)" `607 
v L "stream" 1 751 "int8" `610 
v L "percent" 1 751 "int16" `611 
f G "pwm_set_duty_percent" 1 751 "void(int8 stream,int16 percent)" `609 
v L "frequency" 1 752 "int32" `613 
f B "pwm_set_frequency" 1 752 "void(int32 frequency)" `612 
v L "stream" 1 753 "int8" `615 
v L "frequency" 1 753 "int32" `616 
f G "pwm_set_frequency" 1 753 "void(int8 stream,int32 frequency)" `614  "#use capture() Prototypes:"
f B "get_capture_time" 1 756 "int16()" `617 
v L "stream" 1 757 "int8" `619 
f G "get_capture_time" 1 757 "int16(int8 stream)" `618 
f B "get_capture_event" 1 758 "int8()" `620 
v L "stream" 1 759 "int8" `622 
f G "get_capture_event" 1 759 "int8(int8 stream)" `621  "Enviroment Prototypes:"
c L "get_capture_event" 1 3 2 "FUNCTION"
v L "address" 1 772 "int16" `624 
f B "goto_address" 1 772 "void(int16 address)" `623 
v L "label" 1 773 "int16" `626 
f B "label_address" 1 773 "int16(int16 label)" `625  "Program Memory Prototypes:"
v L "address" 1 776 "int16" `628 
v L "dataptr" 1 776 "*int8" `629 
v L "count" 1 776 "int16" `630 
f B "read_program_memory" 1 776 "void(int16 address,*int8 dataptr,int16 count)" `627 
v L "address" 1 777 "int16" `632 
f B "read_program_eeprom" 1 777 "int16(int16 address)" `631  "INT"
c L "read_program_eeprom" 1 3 4 "FUNCTION"
v L "interrupt" 1 783 "int32" `634 
f B "enable_interrupts" 1 783 "void(int32 interrupt)" `633 
v L "interrupt" 1 784 "int32" `636 
f B "disable_interrupts" 1 784 "void(int32 interrupt)" `635 
v L "interrupt" 1 785 "int32" `638 
f B "clear_interrupt" 1 785 "void(int32 interrupt)" `637 
v L "interrupt" 1 786 "int32" `640 
f B "interrupt_active" 1 786 "int8(int32 interrupt)" `639 
v L "interrupt" 1 787 "int32" `642 
f B "interrupt_enabled" 1 787 "int8(int32 interrupt)" `641 
v L "source" 1 788 "int8" `644 
v L "edge" 1 788 "int8" `645 
f B "ext_int_edge" 1 788 "void(int8 source,int8 edge)" `643 
v L "address" 1 789 "int16" `647 
f B "jump_to_irs" 1 789 "void(int16 address)" `646  "Constants used in EXT_INT_EDGE() are:"
d G "L_TO_H" 1 791 "0x40"
d G "H_TO_L" 1 792 "0"
d G "GLOBAL" 1 794 "0xF2C0"
d G "PERIPH" 1 795 "0xF240"
d G "INT_RTCC" 1 796 "0x00F220"
d G "INT_TIMER0" 1 797 "0x00F220"
d G "INT_TIMER1" 1 798 "0x009D01"
d G "INT_TIMER2" 1 799 "0x009D02"
d G "INT_TIMER3" 1 800 "0x00A002"
d G "INT_EXT_L2H" 1 801 "0x5000F210"
d G "INT_EXT_H2L" 1 802 "0x6000F210"
d G "INT_EXT" 1 803 "0x00F210"
d G "INT_EXT1_L2H" 1 804 "0x5001F008"
d G "INT_EXT1_H2L" 1 805 "0x6001F008"
d G "INT_EXT1" 1 806 "0x00F008"
d G "INT_EXT2_L2H" 1 807 "0x5002F010"
d G "INT_EXT2_H2L" 1 808 "0x6002F010"
d G "INT_EXT2" 1 809 "0x00F010"
d G "INT_EXT3_L2H" 1 810 "0x5003F020"
d G "INT_EXT3_H2L" 1 811 "0x6003F020"
d G "INT_EXT3" 1 812 "0x00F020"
d G "INT_RB" 1 813 "0x00FFF208"
d G "INT_AD" 1 814 "0x009D40"
d G "INT_RDA" 1 815 "0x009D20"
d G "INT_TBE" 1 816 "0x009D10"
d G "INT_SSP" 1 817 "0x009D08"
d G "INT_CCP1" 1 818 "0x009D04"
d G "INT_CCP2" 1 819 "0x00A001"
d G "INT_BUSCOL" 1 820 "0x00A008"
d G "INT_LOWVOLT" 1 821 "0x00A004"
d G "INT_COMP" 1 822 "0x00A040"
d G "INT_RDA2" 1 823 "0x00A320"
d G "INT_TBE2" 1 824 "0x00A310"
d G "INT_OSCF" 1 825 "0x00A080"
d G "INT_LCD" 1 826 "0x00A340"
D G "_STDIO" 2 12 ""
D G "_STRING" 3 12 ""
D G "_STDDEF" 4 13 ""
D G "ptrdiff_t" 4 18 "unsigned int16"
D G "size_t" 4 24 "unsigned int16"
D G "wchar_t" 4 26 "char"
D G "NULL" 4 27 "0"
D G "offsetof" 4 29 "(s,f) (offsetofbit(s,f)/8)"
D G "_CTYPE" 5 12 ""
D G "islower" 5 14 "(x)  isamong(x,"abcdefghijklmnopqrstuvwxyz")"
D G "isupper" 5 15 "(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZ")"
D G "isalnum" 5 16 "(x)  isamong(x,"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz")"
D G "isalpha" 5 17 "(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz")"
D G "isdigit" 5 18 "(x)  isamong(x,"0123456789")"
D G "isspace" 5 19 "(x)  ((x)==' ')"
D G "isxdigit" 5 20 "(x) isamong(x,"0123456789ABCDEFabcdef")"
D G "iscntrl" 5 21 "(x)  ((x)<' ')"
D G "isprint" 5 22 "(x)  ((x)>=' ')"
D G "isgraph" 5 23 "(x)  ((x)>' ')"
D G "ispunct" 5 24 "(x)  (((x)>' ')&&!isalnum(x))"
C L "jump_to_irs" 3 19 10 "FUNCTION"
V L "s1" 3 34 "*int8" `662 
V L "s2" 3 34 "*int8" `663 
V L "n" 3 34 "int16" `664 
F G "memmove" 3 35 "*int8(*int8 s1,*int8 s2,int16 n)" `661 
V L "sc1" 3 36 "*int8" `665 
V L "sc2" 3 37 "*int8" `666 
D G "strcopy" 3 54 "strcpy"
C L "strncpy" 3 19 4 "FUNCTION"
V L "s1" 3 61 "*int8" `668 
V L "s2" 3 61 "*int8" `669 
V L "n" 3 61 "int16" `670 
F G "strncpy" 3 62 "*int8(*int8 s1,*int8 s2,int16 n)" `667 
V L "s" 3 63 "*int8" `671 
C L "strcat" 3 19 3 "FUNCTION"
V L "s1" 3 78 "*int8" `673 
V L "s2" 3 78 "*int8" `674 
F G "strcat" 3 79 "*int8(*int8 s1,*int8 s2)" `672 
V L "s" 3 80 "*int8" `675 
C L "strncat" 3 19 2 "FUNCTION"
V L "s1" 3 96 "*int8" `677 
V L "s2" 3 96 "*int8" `678 
V L "n" 3 96 "int16" `679 
F G "strncat" 3 97 "*int8(*int8 s1,*int8 s2,int16 n)" `676 
V L "s" 3 98 "*int8" `680 
C L "memcmp" 3 19 3 "FUNCTION"
V L "s1" 3 120 "*int8" `682 
V L "s2" 3 120 "*int8" `683 
V L "n" 3 120 "int16" `684 
F G "memcmp" 3 121 "sint8(*int8 s1,*int8 s2,int16 n)" `681 
V L "su1" 3 122 "*int8" `685 
V L "su2" 3 122 "*int8" `686 
C L "strcmp" 3 19 2 "FUNCTION"
V L "s1" 3 134 "*int8" `688 
V L "s2" 3 134 "*int8" `689 
F G "strcmp" 3 135 "sint8(*int8 s1,*int8 s2)" `687 
C L "strcoll" 3 19 2 "FUNCTION"
V L "s1" 3 144 "*int8" `691 
V L "s2" 3 144 "*int8" `692 
F G "strcoll" 3 145 "sint8(*int8 s1,*int8 s2)" `690 
C L "strncmp" 3 19 4 "FUNCTION"
V L "s1" 3 157 "*int8" `694 
V L "s2" 3 157 "*int8" `695 
V L "n" 3 157 "int16" `696 
F G "strncmp" 3 158 "sint8(*int8 s1,*int8 s2,int16 n)" `693 
C L "strxfrm" 3 19 3 "FUNCTION"
V L "s1" 3 169 "*int8" `698 
V L "s2" 3 169 "*int8" `699 
V L "n" 3 169 "int16" `700 
F G "strxfrm" 3 170 "int16(*int8 s1,*int8 s2,int16 n)" `697 
V L "s" 3 171 "*int8" `701 
V L "n1" 3 172 "int8" `702 
C L "memchr" 3 19 3 "FUNCTION"
V L "s" 3 191 "*int8" `704 
V L "c" 3 191 "int8" `705 
V L "n" 3 191 "int16" `706 
F G "memchr" 3 192 "*int8(*int8 s,int8 c,int16 n)" `703 
V L "uc" 3 193 "int8" `707 
V L "su" 3 194 "*int8" `708 
C L "strchr" 3 19 2 "FUNCTION"
V L "s" 3 205 "*int8" `710 
V L "c" 3 205 "int8" `711 
F G "strchr" 3 206 "*int8(*int8 s,int8 c)" `709 
C L "strcspn" 3 19 4 "FUNCTION"
V L "s1" 3 217 "*int8" `713 
V L "s2" 3 217 "*int8" `714 
F G "strcspn" 3 218 "int8(*int8 s1,*int8 s2)" `712 
V L "sc1" 3 219 "*int8" `715 
V L "sc2" 3 219 "*int8" `716 
C L "strpbrk" 3 19 4 "FUNCTION"
V L "s1" 3 232 "*int8" `718 
V L "s2" 3 232 "*int8" `719 
F G "strpbrk" 3 233 "*int8(*int8 s1,*int8 s2)" `717 
V L "sc1" 3 234 "*int8" `720 
V L "sc2" 3 234 "*int8" `721 
C L "strrchr" 3 19 2 "FUNCTION"
V L "s" 3 247 "*int8" `723 
V L "c" 3 247 "int8" `724 
F G "strrchr" 3 248 "*int8(*int8 s,int8 c)" `722 
V L "p" 3 249 "*int8" `725 
C L "strspn" 3 19 2 "FUNCTION"
V L "s1" 3 262 "*int8" `727 
V L "s2" 3 262 "*int8" `728 
F G "strspn" 3 263 "int8(*int8 s1,*int8 s2)" `726 
V L "sc1" 3 264 "*int8" `729 
V L "sc2" 3 264 "*int8" `730 
C L "strstr" 3 19 6 "FUNCTION"
V L "s1" 3 281 "*int8" `732 
V L "s2" 3 281 "*int8" `733 
F G "strstr" 3 282 "*int8(*int8 s1,*int8 s2)" `731 
V L "s" 3 283 "*int8" `734 
V L "t" 3 283 "*int8" `735 
C L "strtok" 3 19 13 "FUNCTION"
V L "s1" 3 320 "*int8" `737 
V L "s2" 3 320 "*int8" `738 
F G "strtok" 3 321 "*int8(*int8 s1,*int8 s2)" `736 
V L "beg" 3 322 "*int8" `739 
V L "end" 3 322 "*int8" `740 
V L "save" 3 323 "*int8" `741 
C L "strlen" 3 19 6 "FUNCTION"
V L "s" 3 369 "*int8" `743 
F G "strlen" 3 370 "int8(*int8 s)" `742 
V L "sc" 3 371 "*int8" `744 
C L "stricmp" 3 19 2 "FUNCTION"
V L "s1" 3 380 "*int8" `746 
V L "s2" 3 380 "*int8" `747 
F G "stricmp" 3 381 "sint8(*int8 s1,*int8 s2)" `745 
C L "strlwr" 3 19 3 "FUNCTION"
V L "s" 3 394 "*int8" `751 
F G "strlwr" 3 395 "*int8(*int8 s)" `750 
V L "p" 3 396 "*int8" `752 
C L "strupr" 3 19 3 "FUNCTION"
V L "s" 3 408 "*int8" `754 
F G "strupr" 3 409 "*int8(*int8 s)" `753 
V L "p" 3 410 "*int8" `755 
D G "_STDLIB" 6 12 ""
D G "RAND_MAX" 6 19 "32767" "The value of which is the maximum value"
D G "LONG_POINTERS" 6 25 "1"
T G "div_t" 6 33 "{sint8 quot,sint8 rem}" `759 
T G "ldiv_t" 6 38 "{sint16 quot,sint16 rem}" `763  "(C) Copyright 1996,2003 Custom Computer Services           ////"
C L "atoi" 4 3 6 "FUNCTION"
C L "atoi" 6 43 2 "FUNCTION"
C L "atoi" 6 46 1 "*"
C L "atoi" 6 46 1 "*"
V L "s" 6 50 "*int8" `765 
f G "atoi" 6 50 "sint8(*int8 s)" `764  "Syntax: signed int32  atoi32(char * s)"
V L "s" 6 58 "*int8" `767 
f G "atoi32" 6 58 "sint32(*int8 s)" `766  "Syntax: char *  itoa(signed int32 num, int8 base, char * s)"
C L "atoi32" 6 46 2 "FUNCTION"
V L "num" 6 79 "sint32" `769 
V L "base" 6 79 "int8" `770 
V L "s" 6 79 "*int8" `771 
f G "itoa" 6 79 "*int8(sint32 num,int8 base,*int8 s)" `768  "Standard template: signed int16  atol(char * s)"
C L "itoa" 6 81 1 "*"
C L "itoa" 6 81 1 "*"
V L "s" 6 85 "*int8" `773 
f G "atol" 6 85 "sint16(*int8 s)" `772  "Standard template: int16 strtoul(char * s,char *endptr,signed int base)"
C L "atol" 6 87 1 "*"
C L "atol" 6 87 1 "*"
C L "atol" 6 87 1 "*"
C L "atol" 6 87 1 "*"
V L "s" 6 93 "*int8" `775 
V L "endptr" 6 93 "*int8" `776 
V L "base" 6 93 "sint8" `777 
f G "strtol" 6 93 "sint16(*int8 s,*int8 endptr,sint8 base)" `774  "Standard template: int16 strtoul(char * s,char *endptr,signed int base)"
C L "strtol" 6 95 1 "*"
C L "strtol" 6 95 1 "*"
C L "strtol" 6 95 1 "*"
C L "strtol" 6 95 1 "*"
V L "s" 6 101 "*int8" `779 
V L "endptr" 6 101 "*int8" `780 
V L "base" 6 101 "sint8" `781 
f G "strtoul" 6 101 "int16(*int8 s,*int8 endptr,sint8 base)" `778  "Standart template: float strtof(char * s,char *endptr)"
C L "strtoul" 6 95 2 "FUNCTION"
C L "strtoul" 6 103 1 "*"
C L "strtoul" 6 103 1 "*"
C L "strtoul" 6 103 1 "*"
V L "s" 6 110 "*int8" `783 
V L "endptr" 6 110 "*int8" `784 
f G "strtof" 6 110 "float(*int8 s,*int8 endptr)" `782  "provided for compatibility"
D G "strtof48" 6 116 "(s, e) strtof(s, e)"
D G "strtod" 6 117 "(s, e) strtof(s, e)"
C L "strtof" 6 103 1 "FUNCTION"
C L "strtof" 6 120 1 "*"
D G "atof" 6 124 "(s)   strtof(s, 0)"
C L "strtof" 6 120 1 "FUNCTION"
C L "strtof" 6 143 1 "*"
C L "strtof" 6 143 1 "*"
C L "strtof" 6 143 1 "*"
V L "s" 6 149 "*int8" `786 
f G "atoe" 6 149 "float(*int8 s)" `785  "Pseudo-random sequence generation functions"
C L "atoe" 6 143 1 "FUNCTION"
C L "atoe" 6 160 1 "*"
C L "atoe" 6 160 1 "*"
C L "atoe" 6 160 1 "*"
C L "atoe" 6 160 1 "*"
C L "atoe" 6 160 1 "*"
f G "rand" 6 169 "int16()" `787  "The srand function uses the argument as a seed for a new sequence of"
C L "rand" 6 171 1 "*"
C L "rand" 6 171 1 "*"
C L "rand" 6 171 1 "*"
C L "rand" 6 171 1 "*"
C L "rand" 6 171 1 "*"
C L "rand" 6 171 1 "*"
C L "rand" 6 171 1 "*"
C L "rand" 6 171 1 "*"
C L "rand" 6 171 1 "*"
C L "rand" 6 171 1 "*"
C L "rand" 6 171 1 "*"
C L "rand" 6 171 1 "*"
C L "rand" 6 171 1 "*"
C L "rand" 6 171 1 "*"
C L "rand" 6 171 1 "*"
V L "seed" 6 191 "int32" `789 
f G "srand" 6 191 "void(int32 seed)" `788  "Memory management functions"
C L "srand" 6 171 3 "FUNCTION"
V L "string" 6 205 "*int8" `791 
f G "system" 6 205 "sint8(*int8 string)" `790  "Searching and sorting utilities"
C L "system" 6 171 1 "FUNCTION"
C L "system" 6 211 1 "*"
C L "system" 6 211 1 "*"
C L "system" 6 211 1 "*"
C L "system" 6 211 1 "*"
C L "system" 6 211 1 "*"
C L "system" 6 211 1 "*"
C L "system" 6 211 1 "*"
C L "system" 6 211 1 "*"
C L "system" 6 211 1 "*"
C L "system" 6 211 1 "*"
C L "system" 6 211 4 "*"
C L "system" 6 229 1 "*"
C L "system" 6 229 1 "*"
C L "system" 6 229 1 "*"
C L "system" 6 229 1 "*"
C L "system" 6 229 1 "*"
C L "system" 6 229 1 "*"
C L "system" 6 229 1 "*"
C L "system" 6 229 1 "*"
D G "labs" 6 249 "abs"
V L "numer" 6 251 "sint8" `793 
V L "denom" 6 251 "sint8" `794 
f G "div" 6 251 "div_t(sint8 numer,sint8 denom)" `792 
V L "numer" 6 252 "sint16" `796 
V L "denom" 6 252 "sint16" `797 
f G "ldiv" 6 252 "ldiv_t(sint16 numer,sint16 denom)" `795  "Multibyte character functions"
C L "ldiv" 6 229 4 "FUNCTION"
C L "ldiv" 4 2 7 "FUNCTION"
C L "ldiv" 3 2 7 "FUNCTION"
V L "numer" 6 274 "sint8" `793 
V L "denom" 6 274 "sint8" `800 
F G "div" 6 275 "div_t(sint8 numer,sint8 denom)" `792 
V L "val" 6 276 "div_t" `798 
V L "numer" 6 282 "sint16" `796 
V L "denom" 6 282 "sint16" `807 
F G "ldiv" 6 283 "ldiv_t(sint16 numer,sint16 denom)" `795 
V L "val" 6 284 "ldiv_t" `805 
V L "s" 6 361 "*int8" `813 
F G "atoe" 6 362 "float(*int8 s)" `785 
V L "pow10" 6 363 "float" `812 
V L "result" 6 364 "float" `813 
V L "sign" 6 365 "int8" `814 
V L "expsign" 6 366 "int8" `815 
V L "c" 6 367 "int8" `816 
V L "ptr" 6 368 "int8" `817 
V L "i" 6 369 "int8" `818 
V L "exp" 6 370 "float" `819 
V L "expcnt" 6 371 "int8" `820 
C L "atoe" 6 397 1 "FUNCTION"
V L "s" 6 429 "*int8" `833 
F G "atoi" 6 430 "sint8(*int8 s)" `764 
V L "result" 6 431 "sint8" `832 
V L "sign" 6 432 "int8" `833 
V L "base" 6 432 "int8" `834 
V L "index" 6 432 "int8" `835 
V L "c" 6 433 "int8" `836 
C L "atoi" 6 397 1 "FUNCTION"
C L "atoi" 6 397 1 "FUNCTION"
C L "atoi" 6 397 1 "FUNCTION"
C L "atoi" 6 397 1 "FUNCTION"
C L "atoi" 6 397 1 "FUNCTION"
C L "atoi" 6 397 1 "FUNCTION"
V L "s" 6 498 "*int8" `838 
F G "atol" 6 499 "sint16(*int8 s)" `772 
V L "result" 6 500 "sint16" `837 
V L "sign" 6 501 "int8" `838 
V L "base" 6 501 "int8" `839 
V L "index" 6 501 "int8" `840 
V L "c" 6 502 "int8" `841 
C L "atol" 6 397 1 "FUNCTION"
C L "atol" 6 397 1 "FUNCTION"
C L "atol" 6 397 1 "FUNCTION"
C L "atol" 6 397 1 "FUNCTION"
C L "mult_with10" 6 397 1 "FUNCTION"
V L "num" 6 565 "int32" `843 
F G "mult_with10" 6 566 "sint32(int32 num)" `842 
V L "s" 6 571 "*int8" `845 
F G "atoi32" 6 572 "sint32(*int8 s)" `766 
V L "result" 6 573 "sint32" `844 
V L "sign" 6 574 "int8" `845 
V L "base" 6 574 "int8" `846 
V L "index" 6 574 "int8" `847 
V L "c" 6 575 "int8" `848 
C L "atoi32" 6 397 1 "FUNCTION"
C L "atoi32" 6 397 1 "FUNCTION"
C L "atoi32" 6 397 1 "FUNCTION"
C L "atoi32" 6 397 1 "FUNCTION"
C L "atoi32" 6 397 1 "FUNCTION"
V L "num" 6 770 "sint32" `769 
V L "base" 6 770 "int8" `770 
V L "s" 6 770 "*int8" `852 
F G "itoa" 6 771 "*int8(sint32 num,int8 base,*int8 s)" `768 
V L "temp" 6 772 "int32" `849 
V L "i" 6 773 "int8" `850 
V L "sign" 6 773 "int8" `851 
V L "cnt" 6 773 "int8" `852 
V L "c" 6 774 "int8" `853 
C L "itoa" 6 397 1 "FUNCTION"
C L "itoa" 6 397 1 "FUNCTION"
C L "itoa" 6 397 1 "FUNCTION"
C L "itoa" 6 397 1 "FUNCTION"
C L "itoa" 6 397 1 "FUNCTION"
V L "s" 6 885 "*int8" `783 
V L "endptr" 6 885 "*int8" `862 
F G "strtof" 6 886 "float(*int8 s,*int8 endptr)" `782 
V L "pow10" 6 887 "float" `860 
V L "result" 6 888 "float" `861 
V L "skip" 6 889 "int1" `862 
V L "sign" 6 889 "int1" `863 
V L "point" 6 889 "int1" `864 
V L "c" 6 890 "int8" `865 
V L "ptr" 6 891 "int8" `866 
V L "s" 6 1103 "*int8" `779 
V L "endptr" 6 1103 "*int8" `780 
V L "base" 6 1103 "sint8" `871 
F G "strtoul" 6 1104 "int16(*int8 s,*int8 endptr,sint8 base)" `778 
V L "sc" 6 1105 "*int8" `868 
V L "s1" 6 1105 "*int8" `869 
V L "sd" 6 1105 "*int8" `870 
V L "x" 6 1106 "int16" `871 
V L "sign" 6 1107 "int8" `872 
V L "digits" 6 1108 "int8[1]" `873 
C L "strtoul" 6 397 1 "FUNCTION"
C L "strtoul" 6 397 1 "FUNCTION"
C L "strtoul" 6 397 1 "FUNCTION"
V L "s" 6 1165 "*int8" `775 
V L "endptr" 6 1165 "*int8" `776 
V L "base" 6 1165 "sint8" `878 
F G "strtol" 6 1166 "sint16(*int8 s,*int8 endptr,sint8 base)" `774 
V L "sc" 6 1167 "*int8" `875 
V L "s1" 6 1167 "*int8" `876 
V L "sd" 6 1167 "*int8" `877 
V L "x" 6 1168 "sint16" `878 
V L "sign" 6 1169 "int8" `879 
V L "digits" 6 1170 "int8[1]" `880 
C L "strtol" 6 397 1 "FUNCTION"
C L "strtol" 6 397 1 "FUNCTION"
C L "strtol" 6 397 1 "FUNCTION"
V L "string" 6 1228 "*int8" `883 
F G "system" 6 1229 "sint8(*int8 string)" `790 
V L "s" 6 1233 "*int8" `883 
V L "n" 6 1233 "int16" `884 
F G "mblen" 6 1234 "int8(*int8 s,int16 n)" `882 
V L "pwc" 6 1238 "*int8" `886 
V L "s" 6 1238 "*int8" `887 
V L "n" 6 1238 "int16" `888 
F G "mbtowc" 6 1239 "int8(*int8 pwc,*int8 s,int16 n)" `885 
V L "s" 6 1244 "*int8" `890 
V L "wchar" 6 1244 "int8" `891 
F G "wctomb" 6 1245 "int8(*int8 s,int8 wchar)" `889 
V L "pwcs" 6 1250 "*int8" `893 
V L "s" 6 1250 "*int8" `894 
V L "n" 6 1250 "int16" `895 
F G "mbstowcs" 6 1251 "int16(*int8 pwcs,*int8 s,int16 n)" `892 
V L "s" 6 1256 "*int8" `897 
V L "pwcs" 6 1256 "*int8" `898 
V L "n" 6 1256 "int16" `899 
F G "wcstombs" 6 1257 "int16(*int8 s,*int8 pwcs,int16 n)" `896 
V G "_Randseed" 6 1266 "int32" `900 
F G "rand" 6 1269 "int16()" `787 
V L "seed" 6 1274 "int32" `905 
F G "srand" 6 1275 "void(int32 seed)" `788 
V L "p1" 6 1284 "*int8" `905 
V L "p2" 6 1284 "*int8" `906 
T G "*_Cmpfun" 6 1284 "sint8(*int8 p1,*int8 p2)" `904 
V L "qdata" 6 1291 "*int8" `909 
V L "qitems" 6 1291 "int8" `910 
V L "qsize" 6 1291 "int8" `911 
V L "cmp" 6 1291 "_Cmpfun" `912 
F G "qsort" 6 1291 "void(*int8 qdata,int8 qitems,int8 qsize,_Cmpfun cmp)" `908 
V L "m" 6 1292 "int8" `913 
V L "j" 6 1292 "int8" `914 
V L "i" 6 1292 "int8" `915 
V L "l" 6 1292 "int8" `916 
V L "done" 6 1293 "int1" `917 
V L "t" 6 1294 "int8[16]" `918 
V L "key" 6 1319 "*int8" `921 
V L "base" 6 1319 "*int8" `922 
V L "num" 6 1319 "int16" `923 
V L "width" 6 1319 "int16" `924 
V L "cmp" 6 1319 "_Cmpfun" `925 
F G "bsearch" 6 1320 "*int8(*int8 key,*int8 base,int16 num,int16 width,_Cmpfun cmp)" `920 
V L "p" 6 1321 "*int8" `926 
V L "q" 6 1321 "*int8" `927 
V L "n" 6 1322 "int16" `928 
V L "pivot" 6 1323 "int16" `929 
V L "val" 6 1324 "sint8" `930 
C L "bsearch" 6 397 1 "FUNCTION"
D G "LCD_BACKLIGHT" 8 4 "0x08"
D G "LCD_NOBACKLIGHT" 8 5 "0x00"
D G "LCD_FIRST_ROW" 8 6 "0x80"
D G "LCD_SECOND_ROW" 8 7 "0xC0"
D G "LCD_THIRD_ROW" 8 8 "0x94"
D G "LCD_FOURTH_ROW" 8 9 "0xD4"
D G "LCD_CLEAR" 8 10 "0x01"
D G "LCD_RETURN_HOME" 8 11 "0x02"
D G "LCD_ENTRY_MODE_SET" 8 12 "0x04"
D G "LCD_CURSOR_OFF" 8 13 "0x0C"
D G "LCD_UNDERLINE_ON" 8 14 "0x0E"
D G "LCD_BLINK_CURSOR_ON" 8 15 "0x0F"
D G "LCD_MOVE_CURSOR_LEFT" 8 16 "0x10"
D G "LCD_MOVE_CURSOR_RIGHT" 8 17 "0x14"
D G "LCD_TURN_ON" 8 18 "0x0C"
D G "LCD_TURN_OFF" 8 19 "0x08"
D G "LCD_SHIFT_LEFT" 8 20 "0x18"
D G "LCD_SHIFT_RIGHT" 8 21 "0x1E"
D G "LCD_TYPE" 8 24 "2" "0=5x7, 1=5x10, 2=2 lines"
V G "RS" 8 28 "int1" `934 
V G "i2c_addr" 8 29 "int8" `935 
V G "backlight_val" 8 29 "int8" `936 
V L "n" 8 31 "int8" `938 
f G "LCD_Write_Nibble" 8 31 "void(int8 n)" `937 
V L "Command" 8 32 "int8" `940 
f G "LCD_Cmd" 8 32 "void(int8 Command)" `939 
V L "col" 8 33 "int8" `942 
V L "row" 8 33 "int8" `943 
f G "LCD_Goto" 8 33 "void(int8 col,int8 row)" `941 
V L "LCD_Char" 8 34 "int8" `945 
f G "LCD_Out" 8 34 "void(int8 LCD_Char)" `944 
V L "_i2c_addr" 8 35 "int8" `947 
f G "LCD_Begin" 8 35 "void(int8 _i2c_addr)" `946 
f G "Backlight" 8 36 "void()" `948 
f G "noBacklight" 8 37 "void()" `949 
V L "value" 8 38 "int8" `951 
f G "Expander_Write" 8 38 "void(int8 value)" `950 
V L "n" 8 40 "int8" `953 
F G "LCD_Write_Nibble" 8 40 "void(int8 n)" `937 
V L "Command" 8 49 "int8" `953 
F G "LCD_Cmd" 8 49 "void(int8 Command)" `939 
V L "col" 8 55 "int8" `942 
V L "row" 8 55 "int8" `954 
F G "LCD_Goto" 8 55 "void(int8 col,int8 row)" `941 
C L "LCD_Goto" 8 1 1 "FUNCTION"
V L "LCD_Char" 8 71 "int8" `953 
F G "LCD_Out" 8 71 "void(int8 LCD_Char)" `944 
V L "_i2c_addr" 8 77 "int8" `953 
F G "LCD_Begin" 8 77 "void(int8 _i2c_addr)" `946 
F G "Backlight" 8 99 "void()" `948 
F G "noBacklight" 8 104 "void()" `949 
V L "value" 8 109 "int8" `953 
F G "Expander_Write" 8 109 "void(int8 value)" `950 
D G "set_tris_kbd" 9 38 "(x) set_tris_d(x)"
D G "COL0" 9 55 " (1 << 5)"
D G "COL1" 9 56 " (1 << 6)"
D G "COL2" 9 57 " (1 << 7)"
D G "ROW0" 9 59 " (1 << 1)"
D G "ROW1" 9 60 " (1 << 2)"
D G "ROW2" 9 61 " (1 << 3)"
D G "ROW3" 9 62 " (1 << 4)"
D G "ALL_ROWS" 9 66 " (ROW0|ROW1|ROW2|ROW3)"
D G "ALL_PINS" 9 67 " (ALL_ROWS|COL0|COL1|COL2)"
V G "KEYS" 9 70 "[4][3]" `953 
D G "KBD_DEBOUNCE_FACTOR" 9 75 "33" "Set this number to apx n/333 where"
C L "kbd_init" 9 2 2 "FUNCTION"
F G "kbd_init" 9 80 "void()" `957 
F G "kbd_getc" 9 83 "int8()" `958 
V L "kbd_call_count" 9 84 "int8" `959 
V L "kbd_down" 9 85 "int1" `960 
V L "last_key" 9 86 "int8" `961 
V L "col" 9 87 "int8" `962 
V L "kchar" 9 89 "int8" `963 
V L "row" 9 90 "int8" `964 
C L "Start" 7 3 1 "FUNCTION"
F G "Start" 7 4 "void()" `965  "LCD_Goto(coluna, linha);"
C L "Start" 7 3 1 "FUNCTION"
C L "CloseDoor" 7 3 1 "FUNCTION"
F G "CloseDoor" 7 25 "void()" `971 
C L "CloseDoor" 7 3 1 "FUNCTION"
C L "Lamps" 7 3 1 "FUNCTION"
F G "Lamps" 7 33 "void()" `973 
V L "speed_" 7 34 "int8" `974 
C L "Lamps" 7 3 1 "FUNCTION"
C L "Lamps" 7 3 1 "FUNCTION"
C L "Lamps" 7 3 1 "FUNCTION"
V L "i" 7 37 "int8" `975 
C L "Lamps" 7 3 1 "FUNCTION"
C L "Lamps" 7 3 1 "FUNCTION"
C L "Lamps" 7 3 1 "FUNCTION"
C L "Lamps" 7 3 1 "FUNCTION"
C L "Lamps" 7 3 1 "FUNCTION"
C L "Lamps" 7 3 1 "FUNCTION"
C L "PassadorPag" 7 3 1 "FUNCTION"
F G "PassadorPag" 7 84 "void()" `976 
V L "speed_" 7 85 "int8" `977 
C L "PassadorPag" 7 3 1 "FUNCTION"
C L "PassadorPag" 7 3 1 "FUNCTION"
C L "PassadorPag" 7 3 1 "FUNCTION"
C L "PassadorPag" 7 3 1 "FUNCTION"
C L "PassadorPag" 7 3 1 "FUNCTION"
C L "PassadorPag" 7 3 1 "FUNCTION"
C L "PassadorPag" 7 3 1 "FUNCTION"
C L "PassadorPag" 7 3 1 "FUNCTION"
C L "PassadorPag" 7 3 1 "FUNCTION"
C L "PassadorPag" 7 3 1 "FUNCTION"
C L "PassadorPag" 7 3 1 "FUNCTION"
V G "k" 0 19 "int8" `978 
V G "valuePagesChar" 0 20 "int8[4]" `979 
V G "cont" 0 21 "int8" `980 
V G "valuePages" 0 22 "int8" `981 
C L "MAIN" 0 18 1 "FUNCTION"
F G "MAIN" 0 26 "void()" `982 
C L "MAIN" 0 18 1 "FUNCTION"
C L "MAIN" 0 18 1 "FUNCTION"
C L "MAIN" 0 18 1 "FUNCTION"
C L "MAIN" 0 18 1 "FUNCTION"
C L "MAIN" 0 18 1 "FUNCTION"
C L "MAIN" 0 18 1 "FUNCTION"
C L "MAIN" 0 18 1 "FUNCTION"
C L "MAIN" 0 18 1 "FUNCTION"
C L "MAIN" 0 18 1 "FUNCTION"
C L "MAIN" 0 18 1 "FUNCTION"
V L "i" 0 66 "int8" `989 
C L "MAIN" 0 18 1 "FUNCTION"
F B "reset_cpu" 0 0
F B "abs" 1 0
F B "sleep" 0 1
F B "delay_cycles" 1 0
F B "read_bank" 2 0
F B "write_bank" 3 0
F B "shift_left" 2 2
F B "shift_right" 2 2
F B "rotate_left" 2 0
F B "rotate_right" 2 0
F B "_mul" 2 0
F B "memset" 3 0
F B "isamoung" 2 0
F B "isamong" 2 0
F B "bit_set" 2 0
F B "bit_clear" 2 0
F B "bit_test" 2 0
F B "toupper" 1 0
F B "tolower" 1 0
F B "swap" 1 0
F B "printf" 1 255
F B "fprintf" 1 255
F B "sprintf" 1 255
F B "scanf" 1 255
F B "fscanf" 1 255
F B "make8" 2 0
F B "make16" 2 0
F B "make32" 1 255
F B "label_address" 1 1
F B "goto_address" 1 0
F B "_va_arg" 1 0
F B "offsetofbit" 2 2
F B "_iosctrl" 1 2
F B "profileout" 1 2
F B "enable_interrupts" 1 0
F B "disable_interrupts" 1 0
F B "interrupt_active" 1 0
F B "clear_interrupt" 1 0
F B "interrupt_enabled" 1 0
F B "jump_to_isr" 1 0
F B "ext_int_edge" 1 2
F B "read_program_eeprom" 1 0
F B "read_program_memory" 3 0
F B "read_rom_memory" 3 0
F B "strcpy" 2 0
F B "memcpy" 3 0
F B "strstr100" 2 0
F B "output_high" 1 0
F B "output_low" 1 0
F B "input" 1 0
F B "input_state" 1 0
F B "output_float" 1 0
F B "output_drive" 1 0
F B "output_bit" 1 1
F B "output_toggle" 1 0
F B "output_a" 1 0
F B "output_b" 1 0
F B "output_c" 1 0
F B "output_d" 1 0
F B "output_e" 1 0
F B "output_f" 1 0
F B "output_g" 1 0
F B "input_a" 0 0
F B "input_b" 0 0
F B "input_c" 0 0
F B "input_d" 0 0
F B "input_e" 0 0
F B "input_f" 0 0
F B "input_g" 0 0
F B "set_tris_a" 1 0
F B "set_tris_b" 1 0
F B "set_tris_c" 1 0
F B "set_tris_d" 1 0
F B "set_tris_e" 1 0
F B "set_tris_f" 1 0
F B "set_tris_g" 1 0
F B "get_tris_a" 0 0
F B "get_tris_b" 0 0
F B "get_tris_c" 0 0
F B "get_tris_d" 0 0
F B "get_tris_e" 0 0
F B "get_tris_f" 0 0
F B "get_tris_g" 0 0
F B "input_change_a" 0 0
F B "input_change_b" 0 0
F B "input_change_c" 0 0
F B "input_change_d" 0 0
F B "input_change_e" 0 0
F B "input_change_f" 0 0
F B "input_change_g" 0 0
F B "port_b_pullups" 1 0
F B "setup_counters" 2 0
F B "setup_wdt" 1 0
F B "restart_cause" 0 0
F B "restart_wdt" 0 0
F B "get_rtcc" 0 0
F B "set_rtcc" 1 0
F B "get_timer0" 0 0
F B "set_timer0" 1 0
F B "setup_comparator" 1 0
F B "setup_port_a" 1 2
F B "setup_adc_ports" 1 2
F B "get_adc_ports" 0 0
F B "setup_adc" 1 0
F B "set_adc_channel" 1 0
F B "read_adc" 0 1
F B "adc_done" 0 0
F B "setup_timer_0" 1 0
F B "setup_vref" 1 0
F B "setup_timer_1" 1 0
F B "get_timer1" 0 0
F B "set_timer1" 1 0
F B "setup_timer_2" 3 0
F B "get_timer2" 0 0
F B "set_timer2" 1 0
F B "setup_timer_3" 1 0
F B "set_timer3" 1 0
F B "get_timer3" 0 0
F B "setup_ccp1" 1 0
F B "set_pwm1_duty" 1 0
F B "setup_ccp2" 1 0
F B "set_pwm2_duty" 1 0
F B "setup_low_volt_detect" 1 0
F B "setup_oscillator" 0 2
F B "setup_spi" 1 0
F B "spi_read" 0 1
F B "spi_write" 1 2
F B "spi_data_is_in" 0 0
F B "setup_spi2" 1 0
F B "spi_read2" 0 1
F B "spi_write2" 1 0
F B "spi_data_is_in2" 0 0
F B "setup_lcd" 1 4
F B "lcd_load" 3 0
F B "lcd_symbol" F B "brownout_enable" 1 0
F B "delay_ms" 1 0
F B "delay_us" 1 0
F B "i2c_read" 0 2
F B "i2c_write" 1 2
F B "i2c_start" 0 2
F B "i2c_stop" 0 1
F B "i2c_isr_state" 0 1
F B "putchar" 1 2
F B "puts" 1 2
F B "getch" 0 1
F B "gets" 1 3
F B "kbhit" 0 1
F B "set_uart_speed" 1 3
F B "setup_uart" 1 3
